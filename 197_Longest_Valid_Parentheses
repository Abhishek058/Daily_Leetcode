Given a string containing just the characters '(' and ')', return the length of the longest valid (well-formed) parentheses 
substring

Input: s = ")()())"
Output: 4
Explanation: The longest valid parentheses substring is "()()".

class Solution {
    public int longestValidParentheses(String s) {
        Stack<Integer> st = new Stack<>();
        int res = 0;
        st.push(-1);

        for(int i=0; i<s.length(); i++){
            if(s.charAt(i) == '('){
                st.push(i);
            }
            else{   
                st.pop();
                if(st.isEmpty()) {
                    st.push(i);
                }
                else{
                    res = Math.max(res, i-st.peek());
                }
            }
        }
        return res;
    }
}

class Solution {
public:
    int longestValidParentheses(string s) {
        int left = 0, right = 0, maxLength = 0;
        
        for (char ch : s) {
            if (ch == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxLength = max(maxLength, 2 * right);
            } else if (right > left) {
                left = 0;
                right = 0;
            }
        }
        
        left = 0;
        right = 0;
        
        for (int i = s.size() - 1; i >= 0; i--) {
            char ch = s[i];
            if (ch == '(') {
                left++;
            } else {
                right++;
            }
            if (left == right) {
                maxLength = max(maxLength, 2 * left);
            } else if (left > right) {
                left = 0;
                right = 0;
            }
        }
        
        return maxLength;
    }
};

