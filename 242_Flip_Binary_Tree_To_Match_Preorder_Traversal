You are given the root of a binary tree with n nodes, where each node is uniquely assigned a value from 1 to n. You are also given a sequence of n values voyage, which is the desired pre-order traversal of the binary tree.



Global integer i indicates next index in voyage v.
If current node == null, it's fine, we return true
If current node.val != v[i], doesn't match wanted value, return false
If left child exist but don't have wanted value, flip it with right child.

class Solution {
    List<Integer> res = new ArrayList<>();
    int i = 0;
    public List<Integer> flipMatchVoyage(TreeNode root, int[] v) {
        return solve(root, v) ? res : Arrays.asList(-1);
    }

    public Boolean solve(TreeNode root, int[] v){
        if(root == null) return true;
        if(root.val != v[i++]) return false;

        if(root.left != null && root.left.val != v[i]){
            res.add(root.val);
            return solve(root.right, v) && solve(root.left, v);
        }

        return solve(root.left, v) && solve(root.right, v);
    }
}
