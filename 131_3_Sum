Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& a) {
        int n = a.size();
        sort(a.begin(), a.end());
        int target = 0;
        vector<vector<int>> ans;
        for(int i=0; i<n; i++){
            if(i == 0 || (a[i] != a[i-1])){
                int j = i+1, k = n-1;

                int tar = target-a[i];
                while(j<k){
                    if(a[j] + a[k] == tar){
                        ans.push_back({a[i], a[j], a[k]});
                        while(j<k && (a[j] == a[j+1])){j++;};
                        while(j<k && (a[k] == a[k-1])){k--;};
                        j++;
                        k--;
                    }
                    else if(a[j] + a[k] < tar){
                        j++;
                    }
                    else{
                        k--;
                    }
                }
            }
        }

        return ans;
    }
};
