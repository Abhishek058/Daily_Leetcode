Given the root of a binary tree, return the postorder traversal of its nodes' values.

C++

class Solution {
public:
    vector<int> v;
    void dfs(TreeNode* root){
        if(root == NULL){
            return;
        }
        dfs(root->left);
        dfs(root->right);
        v.push_back(root->val);

    }
    vector<int> postorderTraversal(TreeNode* root) {
        dfs(root);
        return v;
    }
};


class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> st1 = new Stack<>();
        Stack<TreeNode> st2 = new Stack<>();
        List<Integer> l = new ArrayList<>();
        
        if(root == null){
            return l;
        }
        st1.push(root);

        while(!st1.isEmpty()){
            root = st1.pop();
            st2.add(root);
            if(root.left != null){
                st1.add(root.left);
            }
            if(root.right != null){
                st1.add(root.right);
            }
        }
        while(!st2.isEmpty()){
            l.add(st2.pop().val);
        }
        return l;
    }
}
