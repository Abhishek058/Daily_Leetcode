Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        ans.push_back(-1);
        ans.push_back(-1);

        for(int i=0;i<nums.size();i++){
            if(nums[i] == target){
                ans[0] = i;
                break;
            }
        }
        for(int i=nums.size()-1;i>=0;i--){
            if(nums[i] == target){
                ans[1] = i;
                break;
            }
        }

        return ans;
    }
};

class Solution {
    public int[] searchRange(int[] nums, int target) {

        int[] ans = new int[2];
        ans[0] = -1;
        ans[1] = -1;
        for (int i = 0; i <= nums.length - 1; i++) {
            if (nums[i] == target) {
                ans[0] = i;
                break;
            }
        }
        for (int i = nums.length - 1; i >= 0; i--) {
            if (nums[i] == target) {
                ans[1] = i;
                break;
            }
        }

        return ans;
    }
}
