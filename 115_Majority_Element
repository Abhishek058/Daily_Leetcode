Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Input: nums = [2,2,1,1,1,2,2]
Output: 2

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        if(nums.size() == 1){
            return nums[0];
        }
        sort(nums.begin(), nums.end());
        int maxCnt = 0, ans = -1;
        int cnt = 1;
        for(int i=1; i<nums.size();i++){
            if(nums[i] == nums[i-1]){
                cnt++;
                if(cnt > maxCnt){
                    maxCnt = max(maxCnt, cnt);
                    ans = nums[i];
                }
            }
            else{
                cnt = 1;
            }
        }

        return ans;
    }
};

class Solution {
    public int majorityElement(int[] nums) {
        int ans = -1;
        int cnt = 0;

        for(int i=0; i<nums.length; i++){
            if(cnt == 0){
                ans = nums[i];
                cnt++;
            }
            else{
                if(nums[i] == ans){
                    cnt++;
                }
                else{
                    cnt--;
                }
            }
        }
        return ans;
    }
}
