Input:
        1 
      /   \
     2     3  
    / \   / \ 
   4   5 6   7
      / \
     8   9
   
Output: 1 2 4 8 9 6 7 3

class Solution
{
	ArrayList<Integer> boundary(Node root)
	{
	    ArrayList<Integer> res = new ArrayList<>();
	    if(root != null){
	        res.add(root.data);
	        left(root.left, res);
	        leaf(root.left, res);
	        leaf(root.right, res);
	        right(root.right, res);
	    }
	    return res;
	}
	
	void left(Node root, ArrayList<Integer> res){
	    if((root == null) || (root.left == null && root.right == null)){
	        return ;
	    }
	    
	    res.add(root.data);
	    
	    if(root.left != null){
	        left(root.left, res);
	    }
	    else{
	        left(root.right, res);
	    }
	}
	void right(Node root, ArrayList<Integer> res){
	    if((root == null) || (root.left == null && root.right == null)){
	        return ;
	    }
	    
	    
	    if(root.right != null){
	        right(root.right, res);
	    }
	    else{
	        right(root.left, res);
	    }
	    res.add(root.data);
	}
	void leaf(Node root, ArrayList<Integer> res){
	    if(root == null){
	        return ;
	    }
	    if(root.left == null && root.right == null){
	        res.add(root.data);
	        return;
	    }
	    leaf(root.left, res);
	    leaf(root.right, res);
	}
}
