Given the root of a binary tree, return the preorder traversal of its nodes' values.

C++

class Solution {
public:
vector<int> v;
    void dfs(TreeNode* root){
        if(root == NULL){
            return;
        }

        v.push_back(root->val);
        preorderTraversal(root->left);
        preorderTraversal(root->right);
    }
    vector<int> preorderTraversal(TreeNode* root) {
        dfs(root);
        return v;
    }
};

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> l = new ArrayList<>();
        Stack<TreeNode> st = new Stack<>();

        if(root == null){
            return l;
        }

        st.push(root);

        while(!st.isEmpty()){
            root = st.pop();
            l.add(root.val);
            if(root.right != null){
                st.push(root.right);
            }
            if(root.left != null){
                st.push(root.left);
            }
        }
        return l;
    }
}
