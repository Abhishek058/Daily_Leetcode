You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.

C++

class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> st;
        for(auto s : tokens){
            if(s == "+" || s == "-" || s == "*" || s == "/"){
                int a = st.top();
                st.pop();
                int b = st.top();
                st.pop();
                if(s == "+") {
                    a = a + b;
                }
                if(s == "-") {
                    a = b - a;
                }
                if(s == "*") {
                    a = a * b;
                }
                if(s == "/") {
                    a = b / a;
                }
                st.push(a);
            }
            else{
                st.push(stoi(s));
            }
        }
        return st.top();
    }
};
