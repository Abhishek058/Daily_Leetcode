class Solution {
    public boolean findTarget(TreeNode root, int k) {
        Stack<TreeNode> leftSt = new Stack<>();
        Stack<TreeNode> rightSt = new Stack<>();

        TreeNode currleft = root;
        TreeNode currright = root;

        while(currleft != null){
            leftSt.push(currleft);
            currleft = currleft.left;
        }

        while(currright != null){
            rightSt.push(currright);
            currright = currright.right;
        }

        while(!leftSt.isEmpty() && !rightSt.isEmpty() && leftSt.peek() != rightSt.peek()){
            int sum = leftSt.peek().val + rightSt.peek().val;
            if(sum == k){
                return true;
            }
            else if(sum < k){
                currleft = leftSt.pop().right;
                while(currleft != null){
                    leftSt.push(currleft);
                    currleft = currleft.left;
                }
            }
            else{
                currright = rightSt.pop().left;
                while(currright != null){
                    rightSt.push(currright);
                    currright = currright.right;
                }
            }
        }
        return false;
    }
}

class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        return run(root, root, k);
    }
    bool run(TreeNode* root, TreeNode* curr, int k){
        if(curr == NULL){
            return false;
        }

        if(find(root, k-(curr->val), curr)){
            return true;
        }

        return  run(root, curr->left, k) ||  run(root, curr->right, k);
    }
    bool find(TreeNode* root, int val, TreeNode* curr){
        if(root == NULL){
            return false; 
        }

        if(val > root->val){
            return find(root->right, val, curr);
        }
        else if(val < root->val){
            return find(root->left, val, curr);
        }
        return val == root->val && root != curr;
    }
};
