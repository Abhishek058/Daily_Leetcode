Given two positive integers n and k, the binary string Sn is formed as follows:

S1 = "0"
Si = Si - 1 + "1" + reverse(invert(Si - 1)) for i > 1
Where + denotes the concatenation operation, reverse(x) returns the reversed string x, and invert(x) inverts all the bits in x (0 changes to 1 and 1 changes to 0).

For example, the first four strings in the above sequence are:

S1 = "0"
S2 = "011"
S3 = "0111001"
S4 = "011100110110001"
Return the kth bit in Sn. It is guaranteed that k is valid for the given n.

class Solution {
    public char findKthBit(int n, int k) {
        StringBuilder strArr = new StringBuilder("0");

        for (int i = 1; i < n; i++) {
            StringBuilder nextStr = new StringBuilder(strArr);
            nextStr.append("1");

            for (int j = strArr.length()-1; j >=0; j--) {
                char invertedBit = (strArr.charAt(j) == '0') ? '1' : '0';
                nextStr.append(invertedBit);
            }
            
            strArr = nextStr;
        }

        System.out.print(strArr);
        return strArr.charAt(k - 1);
    }
}

class Solution {
public:
    char findKthBit(int n, int k) {
        if(n==1){
            return '0';
        }

        int nOfCol = pow(2, n) - 1;
        int mid = nOfCol/2;

        if(k <= mid){
            return findKthBit(n-1, k);
        }
        else if(k == mid+1){
            return '1';
        }
        else{
            k = nOfCol - k + 1;
            char c = findKthBit(n-1, k);
            return c == '0' ? '1' : '0';
        }
    }
};
