Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 < numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

class Solution {
public:
    vector<int> twoSum(vector<int>& num, int k) {
        int n = num.size();
        int s = 0, e = n - 1;

        while (s < e) {
            int sum = num[s] + num[e];
            if (sum == k) {
                return {s + 1, e + 1};
            } else if (sum > k) {
                e--;
            } else {
                s++;
            }
        }

        return {};
    }
};
