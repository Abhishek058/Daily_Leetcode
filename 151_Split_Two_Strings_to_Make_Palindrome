You are given two strings a and b of the same length. Choose an index and split both strings at the same index, splitting a into two strings: aprefix and asuffix where a = aprefix + asuffix, and splitting b into two strings: bprefix and bsuffix where b = bprefix + bsuffix. Check if aprefix + bsuffix or bprefix + asuffix forms a palindrome.

When you split a string s into sprefix and ssuffix, either ssuffix or sprefix is allowed to be empty. For example, if s = "abc", then "" + "abc", "a" + "bc", "ab" + "c" , and "abc" + "" are valid splits.

Return true if it is possible to form a palindrome string, otherwise return false.

Notice that x + y denotes the concatenation of strings x and y.

class Solution {
public:
    bool isPal(string str, int i, int j){
        while (i < j) {
            if (str[i] != str[j]) {
                return false;
            }
            i++;
            j--;
        }
        return true;
    }
    bool checkPal(string a, string b){
        int i = 0, j=a.length()-1;
        while(i<j && a[i]==b[j]){
            i++;
            j--;
        }
        return isPal(a, i, j) || isPal(b, i, j);
    }
    bool checkPalindromeFormation(string a, string b) {
        return checkPal(a, b) || checkPal(b, a);
    }
};
