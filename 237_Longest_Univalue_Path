Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.

class Solution {
    private int len = 0;

    public int longestUnivaluePath(TreeNode root) {
        if (root == null) {
            return 0;
        }
        getLen(root, root.val);
        return len;
    }

    private int getLen(TreeNode root, int val) {
        if (root == null) {
            return 0;
        }

        int leftLen = getLen(root.left, root.val);
        int rightLen = getLen(root.right, root.val);

        int arrowLeft = 0;
        int arrowRight = 0;

        if (root.left != null && root.left.val == root.val) {
            arrowLeft = leftLen + 1;
        }

        if (root.right != null && root.right.val == root.val) {
            arrowRight = rightLen + 1;
        }

        len = Math.max(len, arrowLeft + arrowRight);

        return Math.max(arrowLeft, arrowRight);
    }
}
