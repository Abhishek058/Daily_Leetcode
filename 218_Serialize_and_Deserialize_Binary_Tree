

public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null){
            return "";
        }

        StringBuilder str = new StringBuilder();
        Queue<TreeNode> q = new LinkedList<>();

        q.offer(root);
        while(!q.isEmpty()){
            TreeNode curr = q.poll();

            if(curr == null){
                str.append("#,");
            }
            else{
                str.append(Integer.toString(curr.val) + ',');
                q.offer(curr.left);
                q.offer(curr.right);
            }
        }
        return str.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data.length() == 0){
            return null;
        }

        String[] str = data.split(",");

        TreeNode root = new TreeNode(Integer.parseInt(str[0]));
        Queue<TreeNode> q = new LinkedList<>();

        q.offer(root);
        int i=1;
        while(!q.isEmpty() && i<str.length){
            TreeNode curr = q.poll();
            if(!str[i].equals("#")){
                curr.left = new TreeNode(Integer.parseInt(str[i]));
                q.offer(curr.left);
            }
            i++;

            if(i<str.length && !str[i].equals("#")){
                curr.right = new TreeNode(Integer.parseInt(str[i]));
                q.offer(curr.right);
            }
            i++;
        }

        return root;
    }
}
