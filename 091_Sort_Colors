Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

Brute Force 

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int zeroCnt = 0, oneCnt = 0, twoCnt = 0;
        for(int i=0; i<nums.size(); i++){
            if(nums[i] == 0){
                zeroCnt++;
            }
            else if(nums[i] == 1){
                oneCnt++;
            }
            else{
                twoCnt++;
            }
        }
        nums.clear();
        for(int i=0; i<zeroCnt; i++){
            nums.push_back(0);
        }
        for(int i=0; i<oneCnt; i++){
            nums.push_back(1);
        }
        for(int i=0; i<twoCnt; i++){
            nums.push_back(2);
        }
    }
};

optimized

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int count[3] = {0}; // Initialize the count array for 0, 1, and 2
        
        // Count the occurrences of each element
        for (int num : nums) {
            count[num]++;
        }
        
        int index = 0;
        
        // Overwrite the original array with sorted elements
        for (int i = 0; i < 3; i++) {
            while (count[i] > 0) {
                nums[index] = i;
                index++;
                count[i]--;
            }
        }
    }
};
