You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: l1 = [7,2,4,3], l2 = [5,6,4]
Output: [7,8,0,7]

class Solution {
    public ListNode reverse(ListNode head){
        if(head == null){
            return head;
        }
        ListNode prev = null;
        while(head != null){
            ListNode nextNode = head.next;
            head.next = prev;
            prev = head;
            head = nextNode;
        }
        return prev;
    }

    public ListNode addTwoNum(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(0);
        ListNode curr = head;
        int carry = 0;

        while(l1 != null || l2 != null || carry != 0){
            int x = 0, y = 0;
            if(l1!=null){
                x = l1.val;
            }
            if(l2!=null){
                y = l2.val;
            }
            int sum = x+y+carry;
            carry = sum / 10;
            curr.next = new ListNode(sum%10);
            curr = curr.next;

            if(l1!=null){
                l1 = l1.next;
            }
            if(l2!=null){
                l2 = l2.next;
            }
        }
        return head.next;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);

        return reverse(addTwoNum(l1, l2));
    }
}
