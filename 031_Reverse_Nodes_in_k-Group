Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.
k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.
You may not alter the values in the list's nodes, only nodes themselves may be changed.

C++

class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(head == NULL){
            return NULL;
        }

        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* nextNode = NULL;
        int cnt = 0;

        while(curr != NULL && cnt < k){
            nextNode = curr->next;
            curr->next = prev;
            prev = curr;
            curr = nextNode;
            cnt++;
        }
        
        int len = 0;
        ListNode* temp = nextNode;
        while(temp!=NULL){
            len++;
            temp=temp->next;
        }
        if(nextNode!=NULL && len>=k){
            head->next=reverseKGroup(nextNode, k);
        }
        else{
            head->next=nextNode;
        }
        return prev;
        
    }
};
