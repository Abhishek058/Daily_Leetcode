Given two strings a and b, return the minimum number of times you should repeat string a so that string b is a substring of it. If it is impossible for b​​​​​​ to be a substring of a after repeating it, return -1.

Notice: string "abc" repeated 0 times is "", repeated 1 time is "abc" and repeated 2 times is "abcabc".

class Solution {
public:
    int repeatedStringMatch(string a, string b) {
        int cnt = 0;
        string temp = "";
        while (temp.length() < b.length()) {
            temp += a;
            cnt++;
        }

        if (temp.find(b) != string::npos) {
            return cnt;
        }

        temp+=a;
        cnt++;

        if (temp.find(b) != string::npos) {
            return cnt;
        }
        
        return -1;
    }
};
