Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if (headA == null || headB == null) {
            return null; // If either list is empty, there can be no intersection.
        }

        int lenA = getLength(headA);
        int lenB = getLength(headB);

        // Align the starting point of traversal to ensure they reach the intersection point at the same time.
        while (lenA > lenB) {
            headA = headA.next;
            lenA--;
        }

        while (lenB > lenA) {
            headB = headB.next;
            lenB--;
        }

        // Traverse both lists until they meet or reach the end (null).
        while (headA != headB) {
            headA = headA.next;
            headB = headB.next;
        }

        return headA; // Either headA or headB will be the intersection node (or null if no intersection).
    }

    // Helper function to calculate the length of a linked list.
    private int getLength(ListNode head) {
        int length = 0;
        while (head != null) {
            length++;
            head = head.next;
        }
        return length;
    }
}
