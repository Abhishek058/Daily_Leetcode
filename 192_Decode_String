The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

class Solution {
    public String decodeString(String s) {
        Stack<Character> st = new Stack<>();
        String res = "";

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != ']') {
                st.push(s.charAt(i));
            } else {
                // Extract the substring enclosed in square brackets
                String subStr = "";
                while (!st.isEmpty() && st.peek() != '[') {
                    subStr = st.pop() + subStr;
                }
                st.pop(); // Pop the '['

                // Extract the number that specifies the repetition
                String numStr = "";
                while (!st.isEmpty() && Character.isDigit(st.peek())) {
                    numStr = st.pop() + numStr;
                }
                int repeatCount = Integer.parseInt(numStr);

                // Repeat and push the substring back into the stack
                for (int j = 0; j < repeatCount; j++) {
                    for (char c : subStr.toCharArray()) {
                        st.push(c);
                    }
                }
            }
        }

        // Construct the final result
        while (!st.isEmpty()) {
            res = st.pop() + res;
        }

        return res;
    }
}


class Solution {
    public String decodeString(String s) {
        String res = "";
        int i = 0;

        while (i < s.length()) {
            char c = s.charAt(i);

            if (Character.isDigit(c)) {
                int n = Character.getNumericValue(c);
                i++;
                while (i < s.length() && Character.isDigit(s.charAt(i))) {
                    n = n * 10 + Character.getNumericValue(s.charAt(i));
                    i++;
                }

                i++; // Move past '['
                int start = i;
                int openBrackets = 1;
                while (i < s.length() && openBrackets > 0) {
                    if (s.charAt(i) == '[') {
                        openBrackets++;
                    } else if (s.charAt(i) == ']') {
                        openBrackets--;
                    }
                    i++;
                }

                String subString = decodeString(s.substring(start, i - 1));
                for (int j = 0; j < n; j++) {
                    res += subString;
                }
            } else {
                res += c;
                i++;
            }
        }

        return res;
    }
}
