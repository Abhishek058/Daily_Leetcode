Given the root of a complete binary tree, return the number of the nodes in the tree.

Design an algorithm that runs in less than O(n) time complexity.

class Solution {
    public int countNodes(TreeNode root) {
        if(root == null){
            return 0;
        }

        int left = getLeftHeight(root);
        int right = getRightHeight(root);

        if(left == right){
            return ((2<<(left)) - 1);
        }
        else{
            return countNodes(root.left)+countNodes(root.right)+1;
        }
    }

    public int getLeftHeight(TreeNode root){
        int cnt = 0;
        while(root.left != null){
            cnt++;
            root = root.left;
        }

        return cnt;
    }

    public int getRightHeight(TreeNode root){
        int cnt = 0;
        while(root.right != null){
            cnt++;
            root = root.right;
        }

        return cnt;
    }
}
