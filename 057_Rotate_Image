You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.

C++


class Solution {
public:
    void rev(vector<int> &arr){
        int s = 0, e = arr.size()-1;
        while(s<=e){
            int temp = arr[s];
            arr[s] = arr[e];
            arr[e] = temp;
        
            s++;
            e--;
        }
    }
    void rotate(vector<vector<int>>& matrix) {
        int rows = matrix.size();
        int cols = matrix[0].size();

        vector<vector<int>> transposed = matrix;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                matrix[j][i] = transposed[i][j];
            }
        }
        for(int i=0;i<rows;i++){
            rev(matrix[i]);
        }
    }
};



class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int r = matrix.size();

        for (int i = 0; i < r; i++) {
            for (int j = 0; j < i; j++) {
                swap(matrix[j][i], matrix[i][j]);
            }
        }
        for (int i = 0; i < r; i++) {
            reverse(matrix[i].begin(), matrix[i].end());
        }
    }
};


