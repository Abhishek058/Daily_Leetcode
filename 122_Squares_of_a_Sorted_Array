Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        vector<int> ans;
        for(int i : nums){
            ans.push_back(pow(i, 2));
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
};

optimized to 1ms:
class Solution {
    public int[] sortedSquares(int[] nums) {
        int n = nums.length;
        int[] ans = new int[n];
        int l = 0, r = n-1, i = n-1;
        while(l <= r){
            int lSq = nums[l] * nums[l];
            int rSq = nums[r] * nums[r];

            if(lSq > rSq){
                ans[i--] = lSq;
                l++;
            }
            else{
                ans[i--] = rSq;
                r--;
            }
        }

        return ans;
    }
}
