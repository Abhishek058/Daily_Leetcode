You are given two strings s and t of the same length and an integer maxCost.

You want to change s to t. Changing the ith character of s to ith character of t costs |s[i] - t[i]| (i.e., the absolute difference between the ASCII values of the characters).

Return the maximum length of a substring of s that can be changed to be the same as the corresponding substring of t with a cost less than or equal to maxCost. If there is no substring from s that can be changed to its corresponding substring from t, return 0.

class Solution {
public:
    int equalSubstring(string s, string t, int maxCost) {
        int i=0, j=0, maxLen=0, currCost=0;
        while(j < s.length()){
            currCost += abs(s[j] - t[j]);
            j++;

            while(currCost > maxCost){
                currCost -= abs(s[i] - t[i]);
                i++;
            }

            maxLen = max(maxLen, j-i);
        }

        return maxLen;
    }
};
