You are given the root of a binary tree and a positive integer k.

The level sum in the tree is the sum of the values of the nodes that are on the same level.

Return the kth largest level sum in the tree (not necessarily distinct). If there are fewer than k levels in the tree, return -1.

class Solution {
    public long kthLargestLevelSum(TreeNode root, int k) {
        List<Long> lvlSum = new LinkedList<>();
        Queue<TreeNode> q1 = new LinkedList<>();
        q1.offer(root);

        while(!q1.isEmpty()){
            Queue<TreeNode> q2 = new LinkedList<>();
            long sum = 0;

            while(!q1.isEmpty()){
                TreeNode curr = q1.poll();
                sum += curr.val;

                if(curr.left != null){
                    q2.offer(curr.left);
                }
                if(curr.right != null){
                    q2.offer(curr.right);
                }
            }
            lvlSum.add(sum);
            q1 = q2;
        }

        Collections.sort(lvlSum, Collections.reverseOrder());
        if(lvlSum.size() < k){
            return -1;
        }
        return lvlSum.get(k-1);
    }
}
