class Solution {
    public TreeNode buildTree(int[] inOrder, int[] postOrder) {
        if(inOrder == null || postOrder == null || inOrder.length != postOrder.length){
            return null;
        }

        Map<Integer, Integer> mp = new HashMap<Integer, Integer>();

        for(int i=0; i<inOrder.length; i++){
            mp.put(inOrder[i], i);
        }

        return buildTreeIP(inOrder, 0, inOrder.length-1, postOrder, 0, postOrder.length-1, mp);
    }

    public TreeNode buildTreeIP(int[]inOrder, int is, int ie, int[] postOrder, int ps, int pe, Map<Integer, Integer> mp){
        if(ps>pe || is>ie){
            return null;
        }

        TreeNode root = new TreeNode(postOrder[pe]);

        int inRoot = mp.get(postOrder[pe]);
        int numsLeft = inRoot - is;

        root.left = buildTreeIP(inOrder, is, inRoot-1, postOrder, ps, ps+numsLeft-1, mp);
        root.right = buildTreeIP(inOrder, inRoot+1, ie, postOrder, ps+numsLeft, pe-1, mp);

        return root;
    }
}

***************************************************************************************************************************************************************8


class Solution {
    public TreeNode buildTree(int[] in, int[] po) {
        return buildTreeHelper(in, 0, in.length - 1, po, 0, po.length - 1);
    }

    private TreeNode buildTreeHelper(int[] in, int x, int y, int[] po, int a, int b) {
        if (x > y || a > b) {
            return null;
        }

        TreeNode node = new TreeNode(po[b]);
        int SI = x;
        while (node.val != in[SI]) {
            SI++;
        }

        node.left = buildTreeHelper(in, x, SI - 1, po, a, a + SI - x - 1);
        node.right = buildTreeHelper(in, SI + 1, y, po, a + SI - x, b - 1);

        return node;
    }
}
