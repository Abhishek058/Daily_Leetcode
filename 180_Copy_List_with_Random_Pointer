A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.

Construct a deep copy of the list.

Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null){
            return null;
        }
        Node curr = head;
        while (curr != null) {
            Node newNode = new Node(curr.val);
            newNode.next = curr.next;
            curr.next = newNode;
            curr = newNode.next;
        }

        curr = head;
        while (curr != null) {
            if (curr.random != null) {
                curr.next.random = curr.random.next;
            }
            curr = curr.next.next;
        }

        Node org = head;
        Node cpy = head.next;
        Node temp = cpy;

        while(org != null){
            org.next = org.next.next;
            org = org.next;
            if (cpy.next != null) {
                cpy.next = cpy.next.next;
                cpy = cpy.next;
            }
        }

        return temp;
    }
}


class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == NULL){
            return NULL;
        }

        map<Node*, Node*> mp;
        int i=0;
        Node* ptr = head;
        while(ptr){
            mp[ptr] = new Node(ptr->val);
            ptr = ptr->next;
        }

        ptr = head;
        while(ptr){
            mp[ptr]->next = mp[ptr->next];
            mp[ptr]->random = mp[ptr->random];
            ptr = ptr->next;
        }
        return mp[head];
    }
};
