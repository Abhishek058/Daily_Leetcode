Return an integer array answer where answer[i] is the value of the next greater node of the ith node (1-indexed).
If the ith node does not have a next greater node, set answer[i] = 0.

Brute Force:
class Solution {
public:
    vector<int> nextLargerNodes(ListNode* head) {
        if(head == NULL){
            return {0};
        }
        ListNode* temp = head;
        vector<int> res;
        while(temp){
            ListNode* temp2 = temp->next;
            while(temp2){
                if(temp->val < temp2->val){
                    res.push_back(temp2->val);
                    break;
                }
                if(temp2->next == NULL){
                    res.push_back(0);
                }
                temp2 = temp2->next;
            }
            temp = temp->next;
        }
        res.push_back(0);
        return res;
    }
};

optimized: class Solution {
public:
    vector<int> nextLargerNodes(ListNode* head) {
        vector<int> res;
        stack<pair<int, int>> s; // Store (node value, index)
        int index = 0;

        while (head) {
            res.push_back(0); // Initialize with 0 for the current node

            while (!s.empty() && head->val > s.top().first) {
                res[s.top().second] = head->val;
                s.pop();
            }

            s.push({head->val, index});
            head = head->next;
            index++;
        }

        return res;
    }
};

more optimized: 
class Solution {
public:
    vector<int> nextLargerNodes(ListNode* head) {
        vector<int> res, v;
        ListNode* temp = head;
        while(temp){
            res.push_back(temp->val);
            temp = temp->next;
        }
        for(int i=res.size()-1; i>=0; i--){
            int val = res[i];
            while(!v.empty() && v.back() <= res[i]){
                v.pop_back();
            }
            res[i] = v.empty() ? 0 : v.back();
            v.push_back(val);
        }
        return res;
    }
};
